/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package apresentacao;

import controle.Cliente;
import controle.Movimentacao;
import java.awt.Font;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Lucas
 */
public class JFramePrincipal extends javax.swing.JFrame {

    /**
     * Creates new form JFrameClientes
     */
    public JFramePrincipal() {
        initComponents();
        Font fontValor = new Font("Tahoma", Font.BOLD, 11);
        this.jFormattedTextFieldMovVlVendido.setFont(fontValor);
        this.jFormattedTextFieldMovVlPago.setFont(fontValor);
        this.jFormattedTextFieldMovVlPagar.setFont(fontValor);    
        this.jCheckBoxPagamento.setVisible(false);   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        JavaApplicationCadastroClientePUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("JavaApplicationCadastroClientePU").createEntityManager();
        clienteQuery = java.beans.Beans.isDesignTime() ? null : JavaApplicationCadastroClientePUEntityManager.createQuery("SELECT c FROM Cliente c");
        clienteList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(clienteQuery.getResultList());
        movimentacaoQuery = java.beans.Beans.isDesignTime() ? null : JavaApplicationCadastroClientePUEntityManager.createQuery("SELECT m FROM Movimentacao m");
        movimentacaoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(movimentacaoQuery.getResultList());
        jToolBarCadastro = new javax.swing.JToolBar();
        jButtonClienteInserir = new javax.swing.JButton();
        jPanelPrincipal = new javax.swing.JPanel();
        jPanelClientes = new javax.swing.JPanel();
        jTextFieldClientePesqId = new javax.swing.JTextField();
        jTextFieldClientePesqNome = new javax.swing.JTextField();
        jTextFieldClientePesqRef = new javax.swing.JTextField();
        jScrollPaneClientes = new javax.swing.JScrollPane();
        jTableClientes = new javax.swing.JTable();
        jPanelClienteGer = new javax.swing.JPanel();
        jLabelClienteId = new javax.swing.JLabel();
        jTextFieldClienteId = new javax.swing.JTextField();
        jButtonClienteEditar = new javax.swing.JButton();
        jButtonClienteExcluir = new javax.swing.JButton();
        jLabelClienteNome = new javax.swing.JLabel();
        jTextFieldClienteNome = new javax.swing.JTextField();
        jLabelClienteReferencia = new javax.swing.JLabel();
        jTextFieldClienteReferencia = new javax.swing.JTextField();
        jLabelClienteEndereco = new javax.swing.JLabel();
        jTextFieldClienteEndereco = new javax.swing.JTextField();
        jLabelClienteCPF = new javax.swing.JLabel();
        jFormattedTextFieldClienteCPF = new javax.swing.JFormattedTextField();
        jLabelClienteTelefone = new javax.swing.JLabel();
        jFormattedTextFieldClienteTelefone = new javax.swing.JFormattedTextField();
        jPanelMovimentacoes = new javax.swing.JPanel();
        jScrollPaneMovimentacoes = new javax.swing.JScrollPane();
        jTableMovimentacoes = new javax.swing.JTable();
        jLabelMovVlVendido = new javax.swing.JLabel();
        jFormattedTextFieldMovVlVendido = new javax.swing.JFormattedTextField();
        jLabelMovVlPago = new javax.swing.JLabel();
        jFormattedTextFieldMovVlPago = new javax.swing.JFormattedTextField();
        jLabelMovVlPagar = new javax.swing.JLabel();
        jFormattedTextFieldMovVlPagar = new javax.swing.JFormattedTextField();
        jPanelGerMov = new javax.swing.JPanel();
        jLabelMovId = new javax.swing.JLabel();
        jTextFieldMovId = new javax.swing.JTextField();
        jLabelMovData = new javax.swing.JLabel();
        jFormattedTextFieldMovData = new javax.swing.JFormattedTextField();
        jLabelMovValor = new javax.swing.JLabel();
        jFormattedTextFieldMovValor = new javax.swing.JFormattedTextField();
        jPanelMovObs = new javax.swing.JPanel();
        jLabelMovObs = new javax.swing.JLabel();
        textAreaMovObs = new java.awt.TextArea();
        jButtonMovInserirVenda = new javax.swing.JButton();
        jButtonMovInserirPgt = new javax.swing.JButton();
        jButtonMovExcluir = new javax.swing.JButton();
        jCheckBoxPagamento = new javax.swing.JCheckBox();
        jToolBarEdicao = new javax.swing.JToolBar();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jToolBarArquivo = new javax.swing.JToolBar();
        jButtonSair = new javax.swing.JButton();
        jMenuBarPrincipal = new javax.swing.JMenuBar();
        jmArquivo = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        mnuSair = new javax.swing.JMenuItem();
        jmCadastrar = new javax.swing.JMenu();
        jmiClientes = new javax.swing.JMenuItem();
        jmiUsuario = new javax.swing.JMenuItem();
        jmFinanceiro = new javax.swing.JMenu();
        jmRelatorio = new javax.swing.JMenu();
        jmAjuda = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jmiSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerenciador de Contas (Versão 1.1)");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBarCadastro.setRollover(true);

        jButtonClienteInserir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cliente_icon.png"))); // NOI18N
        jButtonClienteInserir.setText("Novo Cliente");
        jButtonClienteInserir.setFocusable(false);
        jButtonClienteInserir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonClienteInserir.setMaximumSize(new java.awt.Dimension(90, 59));
        jButtonClienteInserir.setMinimumSize(new java.awt.Dimension(90, 59));
        jButtonClienteInserir.setName(""); // NOI18N
        jButtonClienteInserir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonClienteInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClienteInserirActionPerformed(evt);
            }
        });
        jToolBarCadastro.add(jButtonClienteInserir);

        jPanelPrincipal.setBackground(new java.awt.Color(102, 102, 102));
        jPanelPrincipal.setAutoscrolls(true);

        jPanelClientes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextFieldClientePesqId.setText("pesq. Id");
        jTextFieldClientePesqId.setEnabled(false);

        jTextFieldClientePesqNome.setText("pesq. Nome");
        jTextFieldClientePesqNome.setEnabled(false);
        jTextFieldClientePesqNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClientePesqNomeActionPerformed(evt);
            }
        });

        jTextFieldClientePesqRef.setText("pesq. Referência");
        jTextFieldClientePesqRef.setEnabled(false);
        jTextFieldClientePesqRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClientePesqRefActionPerformed(evt);
            }
        });

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, clienteList, jTableClientes);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));
        columnBinding.setColumnName("Nome");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${referencia}"));
        columnBinding.setColumnName("Referência");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTableClientes.getSelectionModel () .addListSelectionListener(new ListSelectionListener() { // Adiciona um evento de mudança de seleção ao jTabelClientes
            public void valueChanged(ListSelectionEvent e) { // Evento de mudança de seleção
                if (jTextFieldClienteId.getText().isEmpty()) { // Não há cliente selecionado (Não há o que mostrar)
                    movimentacaoQuery = JavaApplicationCadastroClientePUEntityManager.createQuery("SELECT c FROM controle.Movimentacao c WHERE c.idCliente.id=0"); // Gerar uma query compra vazia
                } else {
                    movimentacaoQuery = JavaApplicationCadastroClientePUEntityManager.createQuery("SELECT c FROM controle.Movimentacao c WHERE c.idCliente.id=" + jTextFieldClienteId.getText()); // Buscar compras de cliente Id
                }
                movimentacaoList.clear(); // Limpa compras atual
                movimentacaoList.addAll(movimentacaoQuery.getResultList()); // Adiciona ao list as compras buscadas
                if (jTableMovimentacoes.getRowCount() > 0) { // Existe compras
                    jTableMovimentacoes.setRowSelectionInterval(0, 0); // Seleciona a primeira no jTable
                } else {
                    // Limpa campos da guia compras se elas não existem
                    //jTextFieldCompraDescricao.setText(null);
                    jTextFieldMovId.setText(null);
                    jFormattedTextFieldMovData.setText(null);
                    jFormattedTextFieldMovValor.setText(null);
                }
                gerenciaControles(estado);
            }
        }

    );
    jScrollPaneClientes.setViewportView(jTableClientes);
    if (jTableClientes.getColumnModel().getColumnCount() > 0) {
        jTableClientes.getColumnModel().getColumn(0).setMinWidth(40);
        jTableClientes.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableClientes.getColumnModel().getColumn(0).setMaxWidth(40);
    }

    jLabelClienteId.setText("Id:");

    jTextFieldClienteId.setEditable(false);
    jTextFieldClienteId.setBackground(new java.awt.Color(255, 255, 255));
    jTextFieldClienteId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    jTextFieldClienteId.setBorder(null);

    org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.id}"), jTextFieldClienteId, org.jdesktop.beansbinding.BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

    jButtonClienteEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/edit_icon.png"))); // NOI18N
    jButtonClienteEditar.setText("Editar");
    jButtonClienteEditar.setMaximumSize(new java.awt.Dimension(83, 25));
    jButtonClienteEditar.setMinimumSize(new java.awt.Dimension(83, 25));
    jButtonClienteEditar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonClienteEditarActionPerformed(evt);
        }
    });

    jButtonClienteExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/trash_icon.png"))); // NOI18N
    jButtonClienteExcluir.setText("Excluir");
    jButtonClienteExcluir.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonClienteExcluirActionPerformed(evt);
        }
    });

    jLabelClienteNome.setText("Nome:");

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nome}"), jTextFieldClienteNome, org.jdesktop.beansbinding.BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

    jLabelClienteReferencia.setText("Referência:");

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.referencia}"), jTextFieldClienteReferencia, org.jdesktop.beansbinding.BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

    jLabelClienteEndereco.setText("Endereço:");

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.endereco}"), jTextFieldClienteEndereco, org.jdesktop.beansbinding.BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

    jLabelClienteCPF.setText("CPF:");

    try {
        jFormattedTextFieldClienteCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
    } catch (java.text.ParseException ex) {
        ex.printStackTrace();
    }

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.cpf}"), jFormattedTextFieldClienteCPF, org.jdesktop.beansbinding.BeanProperty.create("value"));
    bindingGroup.addBinding(binding);

    jLabelClienteTelefone.setText("Telefone:");

    try {
        jFormattedTextFieldClienteTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)####-####")));
    } catch (java.text.ParseException ex) {
        ex.printStackTrace();
    }

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.telefone}"), jFormattedTextFieldClienteTelefone, org.jdesktop.beansbinding.BeanProperty.create("value"));
    bindingGroup.addBinding(binding);

    javax.swing.GroupLayout jPanelClienteGerLayout = new javax.swing.GroupLayout(jPanelClienteGer);
    jPanelClienteGer.setLayout(jPanelClienteGerLayout);
    jPanelClienteGerLayout.setHorizontalGroup(
        jPanelClienteGerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jTextFieldClienteNome, javax.swing.GroupLayout.Alignment.TRAILING)
        .addComponent(jTextFieldClienteReferencia, javax.swing.GroupLayout.Alignment.TRAILING)
        .addComponent(jTextFieldClienteEndereco)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelClienteGerLayout.createSequentialGroup()
            .addGroup(jPanelClienteGerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jFormattedTextFieldClienteCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelClienteCPF))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelClienteGerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelClienteGerLayout.createSequentialGroup()
                    .addComponent(jLabelClienteTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addComponent(jFormattedTextFieldClienteTelefone)))
        .addGroup(jPanelClienteGerLayout.createSequentialGroup()
            .addGroup(jPanelClienteGerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabelClienteNome)
                .addComponent(jLabelClienteReferencia)
                .addComponent(jLabelClienteEndereco))
            .addGap(0, 0, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelClienteGerLayout.createSequentialGroup()
            .addComponent(jLabelClienteId)
            .addGap(2, 2, 2)
            .addComponent(jTextFieldClienteId, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonClienteEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonClienteExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanelClienteGerLayout.setVerticalGroup(
        jPanelClienteGerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanelClienteGerLayout.createSequentialGroup()
            .addGroup(jPanelClienteGerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldClienteId, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelClienteId)
                .addComponent(jButtonClienteEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonClienteExcluir))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabelClienteNome)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTextFieldClienteNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabelClienteReferencia)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTextFieldClienteReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabelClienteEndereco)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTextFieldClienteEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelClienteGerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabelClienteCPF)
                .addComponent(jLabelClienteTelefone))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelClienteGerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jFormattedTextFieldClienteCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jFormattedTextFieldClienteTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    javax.swing.GroupLayout jPanelClientesLayout = new javax.swing.GroupLayout(jPanelClientes);
    jPanelClientes.setLayout(jPanelClientesLayout);
    jPanelClientesLayout.setHorizontalGroup(
        jPanelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanelClientesLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPaneClientes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelClientesLayout.createSequentialGroup()
                    .addComponent(jTextFieldClientePesqId, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldClientePesqNome, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jTextFieldClientePesqRef, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jPanelClienteGer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    jPanelClientesLayout.setVerticalGroup(
        jPanelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelClientesLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldClientePesqNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextFieldClientePesqRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextFieldClientePesqId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPaneClientes, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanelClienteGer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    jPanelMovimentacoes.setBackground(new java.awt.Color(102, 102, 102));

    jTableMovimentacoes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, movimentacaoList, jTableMovimentacoes);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
    columnBinding.setColumnName("Id");
    columnBinding.setColumnClass(Long.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${data}"));
    columnBinding.setColumnName("Data");
    columnBinding.setColumnClass(java.util.Date.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${observacao}"));
    columnBinding.setColumnName("Observação");
    columnBinding.setColumnClass(String.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${tipo}"));
    columnBinding.setColumnName("Tipo");
    columnBinding.setColumnClass(Integer.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${valor}"));
    columnBinding.setColumnName("Valor");
    columnBinding.setColumnClass(Double.class);
    bindingGroup.addBinding(jTableBinding);
    jTableBinding.bind();
    jTableMovimentacoes.getSelectionModel () .addListSelectionListener(new ListSelectionListener() { // Adiciona um evento de mudança de seleção ao jTabelClientes
        public void valueChanged(ListSelectionEvent e) { // Evento de mudança de seleção
            gerenciaControles(estado);
        }
    }

    );
    jScrollPaneMovimentacoes.setViewportView(jTableMovimentacoes);
    if (jTableMovimentacoes.getColumnModel().getColumnCount() > 0) {
        jTableMovimentacoes.getColumnModel().getColumn(0).setMinWidth(40);
        jTableMovimentacoes.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableMovimentacoes.getColumnModel().getColumn(0).setMaxWidth(40);
        jTableMovimentacoes.getColumnModel().getColumn(1).setMinWidth(60);
        jTableMovimentacoes.getColumnModel().getColumn(1).setPreferredWidth(60);
        jTableMovimentacoes.getColumnModel().getColumn(1).setMaxWidth(60);
        jTableMovimentacoes.getColumnModel().getColumn(3).setMinWidth(40);
        jTableMovimentacoes.getColumnModel().getColumn(3).setPreferredWidth(40);
        jTableMovimentacoes.getColumnModel().getColumn(3).setMaxWidth(40);
        jTableMovimentacoes.getColumnModel().getColumn(4).setMinWidth(80);
        jTableMovimentacoes.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTableMovimentacoes.getColumnModel().getColumn(4).setMaxWidth(80);
    }

    jLabelMovVlVendido.setBackground(new java.awt.Color(255, 255, 255));
    jLabelMovVlVendido.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabelMovVlVendido.setForeground(new java.awt.Color(255, 255, 255));
    jLabelMovVlVendido.setText("Vl. Vendido:");

    jFormattedTextFieldMovVlVendido.setEditable(false);
    jFormattedTextFieldMovVlVendido.setBackground(new java.awt.Color(255, 255, 255));
    jFormattedTextFieldMovVlVendido.setForeground(new java.awt.Color(255, 51, 51));
    jFormattedTextFieldMovVlVendido.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
    jFormattedTextFieldMovVlVendido.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            jFormattedTextFieldMovVlVendidojTextFieldCompraDescricaoKeyPressed(evt);
        }
    });

    jLabelMovVlPago.setBackground(new java.awt.Color(255, 255, 255));
    jLabelMovVlPago.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabelMovVlPago.setForeground(new java.awt.Color(255, 255, 255));
    jLabelMovVlPago.setText("Vl. Pago: ");

    jFormattedTextFieldMovVlPago.setEditable(false);
    jFormattedTextFieldMovVlPago.setBackground(new java.awt.Color(255, 255, 255));
    jFormattedTextFieldMovVlPago.setForeground(new java.awt.Color(0, 0, 255));
    jFormattedTextFieldMovVlPago.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
    jFormattedTextFieldMovVlPago.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            jFormattedTextFieldMovVlPagojTextFieldCompraDescricaoKeyPressed(evt);
        }
    });

    jLabelMovVlPagar.setBackground(new java.awt.Color(255, 255, 255));
    jLabelMovVlPagar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabelMovVlPagar.setForeground(new java.awt.Color(255, 255, 255));
    jLabelMovVlPagar.setText("Vl. a Pagar:");

    jFormattedTextFieldMovVlPagar.setEditable(false);
    jFormattedTextFieldMovVlPagar.setBackground(new java.awt.Color(255, 255, 255));
    jFormattedTextFieldMovVlPagar.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
    jFormattedTextFieldMovVlPagar.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            jFormattedTextFieldMovVlPagarjTextFieldCompraDescricaoKeyPressed(evt);
        }
    });

    jPanelGerMov.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    jLabelMovId.setText("Id:");

    jTextFieldMovId.setEditable(false);
    jTextFieldMovId.setBackground(new java.awt.Color(255, 255, 255));
    jTextFieldMovId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    jTextFieldMovId.setBorder(null);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableMovimentacoes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.id}"), jTextFieldMovId, org.jdesktop.beansbinding.BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

    jLabelMovData.setText("Data:");

    jFormattedTextFieldMovData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableMovimentacoes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.data}"), jFormattedTextFieldMovData, org.jdesktop.beansbinding.BeanProperty.create("value"));
    bindingGroup.addBinding(binding);

    jLabelMovValor.setText("Valor:");

    jFormattedTextFieldMovValor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableMovimentacoes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.valor}"), jFormattedTextFieldMovValor, org.jdesktop.beansbinding.BeanProperty.create("value"));
    bindingGroup.addBinding(binding);

    jLabelMovObs.setText("Observação:");

    textAreaMovObs.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableMovimentacoes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.observacao}"), textAreaMovObs, org.jdesktop.beansbinding.BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

    javax.swing.GroupLayout jPanelMovObsLayout = new javax.swing.GroupLayout(jPanelMovObs);
    jPanelMovObs.setLayout(jPanelMovObsLayout);
    jPanelMovObsLayout.setHorizontalGroup(
        jPanelMovObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanelMovObsLayout.createSequentialGroup()
            .addComponent(jLabelMovObs)
            .addGap(0, 0, Short.MAX_VALUE))
        .addComponent(textAreaMovObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanelMovObsLayout.setVerticalGroup(
        jPanelMovObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanelMovObsLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabelMovObs)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(textAreaMovObs, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    jButtonMovInserirVenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/venda_icon.png"))); // NOI18N
    jButtonMovInserirVenda.setText("Inserir Venda");
    jButtonMovInserirVenda.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonMovInserirVendaActionPerformed(evt);
        }
    });

    jButtonMovInserirPgt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/pgt_icon.png"))); // NOI18N
    jButtonMovInserirPgt.setText("Inserir Pagamento");
    jButtonMovInserirPgt.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonMovInserirPgtActionPerformed(evt);
        }
    });

    jButtonMovExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/trash_icon.png"))); // NOI18N
    jButtonMovExcluir.setText("Excluir");
    jButtonMovExcluir.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonMovExcluirActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanelGerMovLayout = new javax.swing.GroupLayout(jPanelGerMov);
    jPanelGerMov.setLayout(jPanelGerMovLayout);
    jPanelGerMovLayout.setHorizontalGroup(
        jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanelGerMovLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelGerMovLayout.createSequentialGroup()
                    .addComponent(jLabelMovId)
                    .addGap(23, 23, 23)
                    .addComponent(jTextFieldMovId, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelGerMovLayout.createSequentialGroup()
                    .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabelMovValor)
                        .addComponent(jLabelMovData))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jFormattedTextFieldMovValor, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        .addComponent(jFormattedTextFieldMovData))))
            .addGap(18, 18, 18)
            .addComponent(jPanelMovObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonMovInserirVenda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMovInserirPgt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jButtonMovExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );
    jPanelGerMovLayout.setVerticalGroup(
        jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelGerMovLayout.createSequentialGroup()
            .addGap(7, 7, 7)
            .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabelMovId)
                .addComponent(jButtonMovInserirVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextFieldMovId, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelGerMovLayout.createSequentialGroup()
                    .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelMovData)
                        .addComponent(jFormattedTextFieldMovData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanelGerMovLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jFormattedTextFieldMovValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelMovValor)))
                .addGroup(jPanelGerMovLayout.createSequentialGroup()
                    .addComponent(jButtonMovInserirPgt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButtonMovExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(11, 11, 11))
        .addComponent(jPanelMovObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    jCheckBoxPagamento.setText("Pagamento");
    jCheckBoxPagamento.setEnabled(false);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableMovimentacoes, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.tipo}"), jCheckBoxPagamento, org.jdesktop.beansbinding.BeanProperty.create("selected"));
    bindingGroup.addBinding(binding);

    javax.swing.GroupLayout jPanelMovimentacoesLayout = new javax.swing.GroupLayout(jPanelMovimentacoes);
    jPanelMovimentacoes.setLayout(jPanelMovimentacoesLayout);
    jPanelMovimentacoesLayout.setHorizontalGroup(
        jPanelMovimentacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanelGerMov, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jScrollPaneMovimentacoes, javax.swing.GroupLayout.Alignment.TRAILING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMovimentacoesLayout.createSequentialGroup()
            .addComponent(jCheckBoxPagamento)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabelMovVlVendido)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jFormattedTextFieldMovVlVendido, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(75, 75, 75)
            .addComponent(jLabelMovVlPago)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jFormattedTextFieldMovVlPago, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(73, 73, 73)
            .addComponent(jLabelMovVlPagar)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jFormattedTextFieldMovVlPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    jPanelMovimentacoesLayout.setVerticalGroup(
        jPanelMovimentacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanelMovimentacoesLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPaneMovimentacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelMovimentacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabelMovVlVendido)
                .addComponent(jLabelMovVlPago)
                .addComponent(jLabelMovVlPagar)
                .addComponent(jFormattedTextFieldMovVlPago, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jFormattedTextFieldMovVlVendido, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jFormattedTextFieldMovVlPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCheckBoxPagamento))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanelGerMov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    javax.swing.GroupLayout jPanelPrincipalLayout = new javax.swing.GroupLayout(jPanelPrincipal);
    jPanelPrincipal.setLayout(jPanelPrincipalLayout);
    jPanelPrincipalLayout.setHorizontalGroup(
        jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanelPrincipalLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanelClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanelMovimentacoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanelPrincipalLayout.setVerticalGroup(
        jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanelPrincipalLayout.createSequentialGroup()
            .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelMovimentacoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanelClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
    );

    jToolBarEdicao.setRollover(true);

    jButtonSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/save_icon.png"))); // NOI18N
    jButtonSalvar.setText("Salvar");
    jButtonSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButtonSalvar.setMaximumSize(new java.awt.Dimension(90, 59));
    jButtonSalvar.setMinimumSize(new java.awt.Dimension(90, 59));
    jButtonSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonSalvarActionPerformed(evt);
        }
    });
    jToolBarEdicao.add(jButtonSalvar);

    jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cancel_icon.png"))); // NOI18N
    jButtonCancelar.setText("Cancelar");
    jButtonCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButtonCancelar.setMaximumSize(new java.awt.Dimension(90, 59));
    jButtonCancelar.setMinimumSize(new java.awt.Dimension(90, 59));
    jButtonCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonCancelarActionPerformed(evt);
        }
    });
    jToolBarEdicao.add(jButtonCancelar);

    jToolBarArquivo.setRollover(true);

    jButtonSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/exit_icon.png"))); // NOI18N
    jButtonSair.setText("Sair");
    jButtonSair.setFocusable(false);
    jButtonSair.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButtonSair.setMaximumSize(new java.awt.Dimension(90, 59));
    jButtonSair.setMinimumSize(new java.awt.Dimension(90, 59));
    jButtonSair.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButtonSair.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonSairActionPerformed(evt);
        }
    });
    jToolBarArquivo.add(jButtonSair);

    jmArquivo.setText("Arquivo");
    jmArquivo.setEnabled(false);
    jmArquivo.add(jSeparator1);

    mnuSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
    mnuSair.setText("Sair");
    mnuSair.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuSairActionPerformed(evt);
        }
    });
    jmArquivo.add(mnuSair);

    jMenuBarPrincipal.add(jmArquivo);

    jmCadastrar.setText("Cadastros");
    jmCadastrar.setEnabled(false);

    jmiClientes.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
    jmiClientes.setText("Clientes");
    jmiClientes.setEnabled(false);
    jmiClientes.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jmiClientesActionPerformed(evt);
        }
    });
    jmCadastrar.add(jmiClientes);

    jmiUsuario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_MASK));
    jmiUsuario.setText("Usuário");
    jmiUsuario.setEnabled(false);
    jmiUsuario.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jmiUsuarioActionPerformed(evt);
        }
    });
    jmCadastrar.add(jmiUsuario);

    jMenuBarPrincipal.add(jmCadastrar);

    jmFinanceiro.setText("Financeiro");
    jmFinanceiro.setEnabled(false);
    jMenuBarPrincipal.add(jmFinanceiro);

    jmRelatorio.setText("Relatórios");
    jmRelatorio.setEnabled(false);
    jMenuBarPrincipal.add(jmRelatorio);

    jmAjuda.setText("Ajuda");
    jmAjuda.setEnabled(false);

    jMenuItem3.setText("Contato");
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItem3ActionPerformed(evt);
        }
    });
    jmAjuda.add(jMenuItem3);

    jmiSobre.setText("Sobre o Sistema");
    jmiSobre.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jmiSobreActionPerformed(evt);
        }
    });
    jmAjuda.add(jmiSobre);

    jMenuBarPrincipal.add(jmAjuda);

    setJMenuBar(jMenuBarPrincipal);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jToolBarCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jToolBarEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jToolBarArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jToolBarCadastro, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addComponent(jToolBarEdicao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBarArquivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    bindingGroup.bind();

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldClientePesqNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClientePesqNomeActionPerformed
        this.encontrarCliente(this.jTextFieldClientePesqNome.getText());
    }//GEN-LAST:event_jTextFieldClientePesqNomeActionPerformed

    private void jButtonClienteExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClienteExcluirActionPerformed
        // Código para excluir o cliente
        if (JOptionPane.showConfirmDialog(rootPane, "Confirma a exclusão deste registro?") == JOptionPane.OK_OPTION) {
            try {
                this.excluirCliente();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
            }
        }
    }//GEN-LAST:event_jButtonClienteExcluirActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
         // Código para cancelar alteração ou inserção de cliente
        try {
            if (this.estado == Estado.INSERINDO_CLIENTE) {
                this.cancelarInsercaoCliente();
            }else if (this.estado == Estado.EDITANDO_CLIENTE){
                this.cancelarAtualizacaoCliente();
            }else {
                this.cancelarInsercaoMovimentacao();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        // Código para salvar o cliente        
        try {
            if (this.estado == Estado.INSERINDO_CLIENTE) {
                this.salvarClienteEmInsercao();
            }else if (this.estado == Estado.EDITANDO_CLIENTE){
                this.salvarClienteEmAtualização();
            }else {
                this.salvarMovimentacaoEmInsercao();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Código que inicializa o jFrameClientes
        this.configurarClienteInicializacao();
    }//GEN-LAST:event_formWindowOpened

    private void jButtonMovInserirVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMovInserirVendaActionPerformed
        this.inserirMovimentacao();
        this.jCheckBoxPagamento.setSelected(false);
        
    }//GEN-LAST:event_jButtonMovInserirVendaActionPerformed

    private void jButtonMovInserirPgtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMovInserirPgtActionPerformed
        this.inserirMovimentacao();
        this.jCheckBoxPagamento.setSelected(true);
    }//GEN-LAST:event_jButtonMovInserirPgtActionPerformed

    private void mnuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuSairActionPerformed

    private void jmiClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiClientesActionPerformed
        //new ViewClientes().setVisible(true);
    }//GEN-LAST:event_jmiClientesActionPerformed

    private void jmiUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiUsuarioActionPerformed
        // TODO add your handling code here:
        //new ViewUsuario().setVisible(true);
    }//GEN-LAST:event_jmiUsuarioActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        //new ViewSobre(this, rootPaneCheckingEnabled).setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jmiSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSobreActionPerformed
        //JOptionPane.showMessageDialog(null, "Fácil Empresarial - " + VariaveisGlobais.versao);
    }//GEN-LAST:event_jmiSobreActionPerformed

    private void jTextFieldClientePesqRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClientePesqRefActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldClientePesqRefActionPerformed

    private void jButtonClienteEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClienteEditarActionPerformed
        editarCliente();
    }//GEN-LAST:event_jButtonClienteEditarActionPerformed

    private void jButtonClienteInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClienteInserirActionPerformed
        this.inserirCliente(); 
    }//GEN-LAST:event_jButtonClienteInserirActionPerformed

    private void jButtonMovExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMovExcluirActionPerformed
        this.excluirMovimentacao();
    }//GEN-LAST:event_jButtonMovExcluirActionPerformed

    private void jFormattedTextFieldMovVlPagojTextFieldCompraDescricaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldMovVlPagojTextFieldCompraDescricaoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextFieldMovVlPagojTextFieldCompraDescricaoKeyPressed

    private void jFormattedTextFieldMovVlVendidojTextFieldCompraDescricaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldMovVlVendidojTextFieldCompraDescricaoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextFieldMovVlVendidojTextFieldCompraDescricaoKeyPressed

    private void jFormattedTextFieldMovVlPagarjTextFieldCompraDescricaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldMovVlPagarjTextFieldCompraDescricaoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextFieldMovVlPagarjTextFieldCompraDescricaoKeyPressed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonSairActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFramePrincipal().setVisible(true);
            }
        });
    }
    
    private enum Estado {
        INSERINDO_CLIENTE,
        EDITANDO_CLIENTE,
        CONSULTANDO,
        INSERINDO_MOVIMENTACAO
    }
    
    private Estado estado = Estado.CONSULTANDO;
    
    private Cliente cliente;

    private void gerenciaControles(Estado newEstado) {
        if(newEstado == Estado.CONSULTANDO){
            //Main
            this.jButtonClienteInserir.setEnabled(true);
            this.jButtonSalvar.setEnabled(false);
            this.jButtonCancelar.setEnabled(false);
            
            //Cliente
             //Buttons
            this.jButtonClienteEditar.setEnabled(true);
            this.jButtonClienteExcluir.setEnabled(this.jTableClientes.getRowCount() != 0); // Existe registro para excluir? 
             //Fields
            this.jTextFieldClienteNome.setEditable(false);
            this.jTextFieldClienteReferencia.setEditable(false);
            this.jTextFieldClienteNome.setEditable(false);
            this.jTextFieldClienteEndereco.setEditable(false);
            this.jFormattedTextFieldClienteCPF.setEditable(false);
            this.jFormattedTextFieldClienteTelefone.setEditable(false);            
             //Table
            this.jTableClientes.setEnabled(true);
            
            //Movimentacao
             //Buttons
            this.jButtonMovInserirPgt.setEnabled(true);
            this.jButtonMovInserirVenda.setEnabled(true);
            this.jButtonMovExcluir.setEnabled(this.jTableMovimentacoes.getRowCount() != 0); //Existe registro para liquidar?
             //Fields
            this.jFormattedTextFieldMovData.setEditable(false);
            this.jFormattedTextFieldMovValor.setEditable(false);
            this.textAreaMovObs.setEditable(false);
             //Table
            this.jTableMovimentacoes.setEnabled(true);
            
        } else if((newEstado == Estado.EDITANDO_CLIENTE) || (newEstado == Estado.INSERINDO_CLIENTE)) {
            //Main
            this.jButtonClienteInserir.setEnabled(false);
            this.jButtonSalvar.setEnabled(true);
            this.jButtonCancelar.setEnabled(true);
            
            //Cliente
             //Buttons
            this.jButtonClienteEditar.setEnabled(false);
            this.jButtonClienteExcluir.setEnabled(false);
             //Fields
            this.jTextFieldClienteNome.setEditable(true);
            this.jTextFieldClienteReferencia.setEditable(true);
            this.jTextFieldClienteNome.setEditable(true);
            this.jTextFieldClienteEndereco.setEditable(true);
            this.jFormattedTextFieldClienteCPF.setEditable(true);
            this.jFormattedTextFieldClienteTelefone.setEditable(true);
             //Table
            this.jTableClientes.setEnabled(false);
            
            //Movimentacao
             //Buttons
            this.jButtonMovInserirPgt.setEnabled(false);
            this.jButtonMovInserirVenda.setEnabled(false);
            this.jButtonMovExcluir.setEnabled(false); 
             //Fields
            this.jFormattedTextFieldMovData.setEditable(false);
            this.jFormattedTextFieldMovValor.setEditable(false);
            this.textAreaMovObs.setEditable(false);
             //Table
            this.jTableMovimentacoes.setEnabled(false);
        } else if(newEstado == Estado.INSERINDO_MOVIMENTACAO) {
            //Main
            this.jButtonClienteInserir.setEnabled(false);
            this.jButtonSalvar.setEnabled(true);
            this.jButtonCancelar.setEnabled(true);
            
            //Cliente
             //Buttons
            this.jButtonClienteEditar.setEnabled(false);
            this.jButtonClienteExcluir.setEnabled(false);
             //Fields
            this.jTextFieldClienteNome.setEditable(false);
            this.jTextFieldClienteReferencia.setEditable(false);
            this.jTextFieldClienteNome.setEditable(false);
            this.jTextFieldClienteEndereco.setEditable(false);
            this.jFormattedTextFieldClienteCPF.setEditable(false);
            this.jFormattedTextFieldClienteTelefone.setEditable(false);
             //Table
            this.jTableClientes.setEnabled(false);
            
            //Movimentacao
             //Buttons
            this.jButtonMovInserirPgt.setEnabled(false);
            this.jButtonMovInserirVenda.setEnabled(false);
            this.jButtonMovExcluir.setEnabled(false); 
             //Fields
            this.jFormattedTextFieldMovData.setEditable(true);
            this.jFormattedTextFieldMovValor.setEditable(true);
            this.textAreaMovObs.setEditable(true);
             //Table
            this.jTableMovimentacoes.setEnabled(false);
        }
        this.estado = newEstado;
        calculaValores();
        if (jTextFieldMovId.getText().isEmpty()) { 
            textAreaMovObs.setText(null);
            jFormattedTextFieldMovData.setText(null);
            jFormattedTextFieldMovValor.setText(null);
        }
    }

    private void calculaValores() {
        double vlVendido = 0;
        double vlPago = 0;
        double vlPagar = 0;                       
        for (int i = 0, rows = this.jTableMovimentacoes.getRowCount(); i < rows; i++) {
            if(Integer.parseInt(this.jTableMovimentacoes.getValueAt(i, 3).toString()) == 1){                
                vlPago += Double.parseDouble(this.jTableMovimentacoes.getValueAt(i, 4).toString());
            } else if(Integer.parseInt(this.jTableMovimentacoes.getValueAt(i, 3).toString()) == 0){
                vlVendido += Double.parseDouble(this.jTableMovimentacoes.getValueAt(i, 4).toString());
            }
        }        
        vlPagar = vlVendido - vlPago;
        if(vlPagar > 0){
            this.jFormattedTextFieldMovVlPagar.setForeground(this.jFormattedTextFieldMovVlVendido.getForeground());
        } else if(vlPagar < 0){
            this.jFormattedTextFieldMovVlPagar.setForeground(this.jFormattedTextFieldMovVlPago.getForeground());
        } else {
            this.jFormattedTextFieldMovVlPagar.setForeground(this.jFormattedTextFieldMovData.getForeground());
        }        
        this.jFormattedTextFieldMovVlVendido.setValue(vlVendido);
        this.jFormattedTextFieldMovVlPago.setValue(vlPago);
        this.jFormattedTextFieldMovVlPagar.setValue(vlPagar);
    }

    private void cancelarInsercaoMovimentacao() {            
        // Remove a linha em branco da lista e automaticamente do JTable
        this.movimentacaoList.remove(this.jTableMovimentacoes.getSelectedRow());
        if (this.jTableMovimentacoes.getRowCount() > 0) { // Se houver objetos na lista
            // Seleciona o último da lista
            this.jTableMovimentacoes.setRowSelectionInterval(this.jTableMovimentacoes.getRowCount() - 1, this.jTableMovimentacoes.getRowCount() - 1);
        }
        gerenciaControles(Estado.CONSULTANDO);
    }
 
    public Cliente getCliente() {
        return cliente;
    }
 
    public void setCliente(Cliente cliente) {
        this.cliente = cliente;
    }
 
    private void inserirCliente() {
        Cliente cliente = new Cliente();
        this.clienteList.add(cliente); // Insere no clienteList para forçar a aparição de uma linha em branco no JTableClientes 
        // Seleciona objeto inserido na tabela e estabelece foco no campo "nome" (Apenas dar a sensação de inserção)
        this.jTableClientes.setRowSelectionInterval(this.jTableClientes.getRowCount() - 1, this.jTableClientes.getRowCount() - 1);
        this.jTextFieldClienteNome.requestFocus(); 
        //Configura botões para estado de Inserção
        gerenciaControles(Estado.INSERINDO_CLIENTE);
    }
    
    private void editarCliente() {
        gerenciaControles(Estado.EDITANDO_CLIENTE);
    }
    
 
    private void salvarClienteEmAtualização() {
        Cliente cliente = new Cliente();
        // Encontra e carrega o objeto de atualização com base no "Id"
        if (cliente.encontradoId(Long.valueOf(this.jTextFieldClienteId.getText()))) { 
            // Atualiza o objeto com novos valores
            cliente.setNome(this.jTextFieldClienteNome.getText());
            cliente.setCpf(this.jFormattedTextFieldClienteCPF.getText());
            cliente.setEndereco(this.jTextFieldClienteEndereco.getText());            
            cliente.setReferencia(this.jTextFieldClienteReferencia.getText());            
            cliente.setTelefone(this.jFormattedTextFieldClienteTelefone.getText()); 
            if (cliente.atualizado()) { // Se atualizado objeto no BD 
                //Configura botões para estado de Consulta
                gerenciaControles(Estado.CONSULTANDO);
            }
        }
    }
 
    private void encontrarCliente(String CPF) {
        // Encontra e carrega o objeto de atualização com base no "Id"
        if (CPF.isEmpty()) {
 
            // Busca todos
            clienteQuery = JavaApplicationCadastroClientePUEntityManager.createQuery("SELECT c FROM Cliente c");
 
        } else {
 
            clienteQuery = JavaApplicationCadastroClientePUEntityManager.createQuery("SELECT c FROM Cliente c WHERE c.cpf = " + CPF);
        }
 
        clienteList.clear();
        clienteList.addAll(clienteQuery.getResultList());
        if (jTableClientes.getRowCount() > 0) {
            jTableClientes.setRowSelectionInterval(0, 0);
        } else {
            jTextFieldClienteId.setText(null);
            jTextFieldClienteNome.setText(null);            
            jFormattedTextFieldClienteCPF.setText(null);
            jTextFieldClienteEndereco.setText(null);
            jTextFieldClienteReferencia.setText(null);
            jFormattedTextFieldClienteTelefone.setText(null);
        }
    }
 
    private void salvarClienteEmInsercao() {
        // Cria o objeto
        Cliente cliente = new Cliente();
        // Configura o objeto com os valores definidos nos campos
        cliente.setNome(this.jTextFieldClienteNome.getText());
        cliente.setCpf(this.jFormattedTextFieldClienteCPF.getText());
        cliente.setEndereco(this.jTextFieldClienteEndereco.getText());        
        cliente.setReferencia(this.jTextFieldClienteReferencia.getText());
        cliente.setTelefone(this.jFormattedTextFieldClienteTelefone.getText()); 
        if (cliente.armazenado()) { // Se armazenado objeto no BD 
            // Retira a linha em branco, selecionada na inserção, da lista e do JTableClientes
            this.clienteList.remove(this.jTableClientes.getSelectedRow());
            // Adiciona o novo "Cliente" gravado no BD, na lista e automaticamente no JTableClientes.
            this.clienteList.add(cliente); 
            // Seleciona o último da lista
            
            this.jTableClientes.setRowSelectionInterval(this.jTableClientes.getRowCount() - 1, this.jTableClientes.getRowCount() - 1); 
            //Configura botões para estado de Consulta
            gerenciaControles(Estado.CONSULTANDO);
        } 
    }
 
    private void cancelarInsercaoCliente() { 
        // Remove a linha em branco da lista e automaticamente do JTable
        this.clienteList.remove(this.jTableClientes.getSelectedRow());
        if (this.jTableClientes.getRowCount() > 0) { // Se houver objetos na lista
            // Seleciona o último da lista
            this.jTableClientes.setRowSelectionInterval(this.jTableClientes.getRowCount() - 1, this.jTableClientes.getRowCount() - 1);
        }
        gerenciaControles(Estado.CONSULTANDO);
    }
 
    private void cancelarAtualizacaoCliente() {
        // Busca o objeto com informações anteriores à atualização
        Cliente cliente = new Cliente();
        if (cliente.encontradoId(Long.valueOf(this.jTextFieldClienteId.getText()))) { 
            // Atualiza os campos com dados sem alteração
            this.jTextFieldClienteNome.setText(cliente.getNome());
            this.jFormattedTextFieldClienteCPF.setText(cliente.getCpf());
            this.jTextFieldClienteEndereco.setText(cliente.getEndereco());
            this.jTextFieldClienteReferencia.setText(cliente.getReferencia());
            this.jFormattedTextFieldClienteTelefone.setText(cliente.getTelefone());
        }
        gerenciaControles(Estado.CONSULTANDO);
    }
 
    private void excluirCliente() {
        Cliente cliente = new Cliente(); // Cria o objeto
        cliente.setId(Long.valueOf(this.jTextFieldClienteId.getText())); // Configura o id de exclusão 
        if (cliente.desarmazenado()) { // Exclui o objeto do BD
            int linhaSelecionada = this.jTableClientes.getSelectedRow(); // Marca linha selecionada da tabela
            this.clienteList.remove(this.jTableClientes.getSelectedRow()); // Remove objeto da lista e do JTabel
            if (this.jTableClientes.getRowCount() > 0) { // Se houver linhas na tabela
                if (linhaSelecionada > 0) {
                    linhaSelecionada--;
                }
                this.jTableClientes.setRowSelectionInterval(linhaSelecionada, linhaSelecionada); // Seleciona linha marcada
            }
            //Configura botões para estado de Consulta
            gerenciaControles(Estado.CONSULTANDO);
        }
    }
 
    private void configurarClienteInicializacao() {
        // Configuração da Guia Clientes
        if (this.jTableClientes.getRowCount() > 0) { // Se houver linhas na lista
            this.jTableClientes.setRowSelectionInterval(0, 0); // Seleciona linha 0 (primeira)
        }        
        // Configuração da Guia Movimentacoes
        if (this.jTableMovimentacoes.getRowCount() > 0) { // Se houver linhas na lista
            this.jTableMovimentacoes.setRowSelectionInterval(0, 0); // Seleciona linha 0 (primeira)
        }
        //Configura botões para o Estado de Consulta
        gerenciaControles(Estado.CONSULTANDO); 
    }
 
 
    private void excluirMovimentacao() {
        Movimentacao movimentacao = new Movimentacao(); // Cria o objeto
        movimentacao.setId(Long.valueOf(this.jTextFieldMovId.getText())); // Configura o id de exclusão
        if (movimentacao.desarmazenado()) { // Exclui o objeto do BD
            int linhaSelecionada = this.jTableMovimentacoes.getSelectedRow(); // Marca linha selecionada da tabela
            this.movimentacaoList.remove(this.jTableMovimentacoes.getSelectedRow()); // Remove objeto da lista
            if (this.jTableMovimentacoes.getRowCount() > 0) { // Se houver linhas na tabela
                if (linhaSelecionada > 0) {
                    linhaSelecionada--;
                }
                this.jTableMovimentacoes.setRowSelectionInterval(linhaSelecionada, linhaSelecionada); // Seleciona linha marcada
            }
            gerenciaControles(Estado.CONSULTANDO);
        }
    }
 
    private void inserirMovimentacao() {
        Movimentacao movimentacao = new Movimentacao();        
        this.movimentacaoList.add(movimentacao); // Insere no compraList para forçar a aparição de uma linha em branco no JTableCompras 
        // Seleciona objeto inserido na tabela e estabelece foco no campo "nome" (Apenas dar a sensação de inserção)
        this.jTableMovimentacoes.setRowSelectionInterval(this.jTableMovimentacoes.getRowCount() - 1, this.jTableMovimentacoes.getRowCount() - 1);
        this.jFormattedTextFieldMovData.requestFocus();
        //Configura botões para estado de Inserção        
        gerenciaControles(Estado.INSERINDO_MOVIMENTACAO);
    }
 
    private void salvarMovimentacaoEmInsercao() throws ParseException {
        // Cria e configura o objeto
        Movimentacao movimentacao = new Movimentacao();
        // Configura o objeto com os valores definidos nos campos
        Cliente cliente = new Cliente();
        cliente.encontradoId(Long.valueOf(this.jTextFieldClienteId.getText()));
        movimentacao.setIdCliente(cliente);
        //movimentacao.setObservacao(this.jTextFieldCompraDescricao.getText());
        SimpleDateFormat data = new SimpleDateFormat("dd/MM/yyyy");
        movimentacao.setData((java.util.Date) data.parse(this.jFormattedTextFieldMovData.getText()));
        DecimalFormat decimalFormat = new DecimalFormat("¤ #,##0.00");
        movimentacao.setValor(decimalFormat.parse(this.jFormattedTextFieldMovValor.getText()).doubleValue());
        movimentacao.setObservacao(this.textAreaMovObs.getText());
        if(this.jCheckBoxPagamento.isSelected()) {        
            movimentacao.setTipo(1);    
        } else {            
            movimentacao.setTipo(0);
        }
        if (movimentacao.armazenado()) { // Se armazenado objeto no BD 
            // Retira o objeto da lista e o adiciona com o id
            this.movimentacaoList.remove(this.jTableMovimentacoes.getSelectedRow());
            this.movimentacaoList.add(movimentacao); 
            // Seleciona o último da lista
            this.jTableMovimentacoes.setRowSelectionInterval(this.jTableMovimentacoes.getRowCount() - 1, this.jTableMovimentacoes.getRowCount() - 1);
            gerenciaControles(Estado.CONSULTANDO);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager JavaApplicationCadastroClientePUEntityManager;
    private java.util.List<controle.Cliente> clienteList;
    private javax.persistence.Query clienteQuery;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonClienteEditar;
    private javax.swing.JButton jButtonClienteExcluir;
    private javax.swing.JButton jButtonClienteInserir;
    private javax.swing.JButton jButtonMovExcluir;
    private javax.swing.JButton jButtonMovInserirPgt;
    private javax.swing.JButton jButtonMovInserirVenda;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JCheckBox jCheckBoxPagamento;
    private javax.swing.JFormattedTextField jFormattedTextFieldClienteCPF;
    private javax.swing.JFormattedTextField jFormattedTextFieldClienteTelefone;
    private javax.swing.JFormattedTextField jFormattedTextFieldMovData;
    private javax.swing.JFormattedTextField jFormattedTextFieldMovValor;
    private javax.swing.JFormattedTextField jFormattedTextFieldMovVlPagar;
    private javax.swing.JFormattedTextField jFormattedTextFieldMovVlPago;
    private javax.swing.JFormattedTextField jFormattedTextFieldMovVlVendido;
    private javax.swing.JLabel jLabelClienteCPF;
    private javax.swing.JLabel jLabelClienteEndereco;
    private javax.swing.JLabel jLabelClienteId;
    private javax.swing.JLabel jLabelClienteNome;
    private javax.swing.JLabel jLabelClienteReferencia;
    private javax.swing.JLabel jLabelClienteTelefone;
    private javax.swing.JLabel jLabelMovData;
    private javax.swing.JLabel jLabelMovId;
    private javax.swing.JLabel jLabelMovObs;
    private javax.swing.JLabel jLabelMovValor;
    private javax.swing.JLabel jLabelMovVlPagar;
    private javax.swing.JLabel jLabelMovVlPago;
    private javax.swing.JLabel jLabelMovVlVendido;
    private javax.swing.JMenuBar jMenuBarPrincipal;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanelClienteGer;
    private javax.swing.JPanel jPanelClientes;
    private javax.swing.JPanel jPanelGerMov;
    private javax.swing.JPanel jPanelMovObs;
    private javax.swing.JPanel jPanelMovimentacoes;
    private javax.swing.JPanel jPanelPrincipal;
    private javax.swing.JScrollPane jScrollPaneClientes;
    private javax.swing.JScrollPane jScrollPaneMovimentacoes;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableClientes;
    private javax.swing.JTable jTableMovimentacoes;
    private javax.swing.JTextField jTextFieldClienteEndereco;
    private javax.swing.JTextField jTextFieldClienteId;
    private javax.swing.JTextField jTextFieldClienteNome;
    private javax.swing.JTextField jTextFieldClientePesqId;
    private javax.swing.JTextField jTextFieldClientePesqNome;
    private javax.swing.JTextField jTextFieldClientePesqRef;
    private javax.swing.JTextField jTextFieldClienteReferencia;
    private javax.swing.JTextField jTextFieldMovId;
    private javax.swing.JToolBar jToolBarArquivo;
    private javax.swing.JToolBar jToolBarCadastro;
    private javax.swing.JToolBar jToolBarEdicao;
    private javax.swing.JMenu jmAjuda;
    private javax.swing.JMenu jmArquivo;
    private javax.swing.JMenu jmCadastrar;
    private javax.swing.JMenu jmFinanceiro;
    private javax.swing.JMenu jmRelatorio;
    private javax.swing.JMenuItem jmiClientes;
    private javax.swing.JMenuItem jmiSobre;
    private javax.swing.JMenuItem jmiUsuario;
    private javax.swing.JMenuItem mnuSair;
    private java.util.List<controle.Movimentacao> movimentacaoList;
    private javax.persistence.Query movimentacaoQuery;
    private java.awt.TextArea textAreaMovObs;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
